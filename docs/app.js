import {ssr} from "@sveltejs/kit/ssr";
import {create_ssr_component, validate_component, missing_component, escape, add_attribute, each} from "svelte/internal";
import {setContext, afterUpdate, onMount, createEventDispatcher} from "svelte";
import {v4} from "uuid";
import "svelte/transition";
var root_svelte_svelte_type_style_lang = "#svelte-announcer.svelte-1j55zn5{position:absolute;left:0;top:0;clip:rect(0 0 0 0);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}";
const css$3 = {
  code: "#svelte-announcer.svelte-1j55zn5{position:absolute;left:0;top:0;clip:rect(0 0 0 0);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}",
  map: `{"version":3,"file":"root.svelte","sources":["root.svelte"],"sourcesContent":["<!-- This file is generated by @sveltejs/kit \u2014 do not edit it! -->\\n<script>\\n\\timport { setContext, afterUpdate, onMount } from 'svelte';\\n\\n\\t// stores\\n\\texport let stores;\\n\\texport let page;\\n\\n\\texport let components;\\n\\texport let props_0 = null;\\n\\texport let props_1 = null;\\n\\texport let props_2 = null;\\n\\n\\tsetContext('__svelte__', stores);\\n\\n\\t$: stores.page.set(page);\\n\\tafterUpdate(stores.page.notify);\\n\\n\\tlet mounted = false;\\n\\tlet navigated = false;\\n\\tlet title = null;\\n\\n\\tonMount(() => {\\n\\t\\tconst unsubscribe = stores.page.subscribe(() => {\\n\\t\\t\\tif (mounted) {\\n\\t\\t\\t\\tnavigated = true;\\n\\t\\t\\t\\ttitle = document.title || 'untitled page';\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tmounted = true;\\n\\t\\treturn unsubscribe;\\n\\t});\\n</script>\\n\\n<svelte:component this={components[0]} {...(props_0 || {})}>\\n\\t{#if components[1]}\\n\\t\\t<svelte:component this={components[1]} {...(props_1 || {})}>\\n\\t\\t\\t{#if components[2]}\\n\\t\\t\\t\\t<svelte:component this={components[2]} {...(props_2 || {})}/>\\n\\t\\t\\t{/if}\\n\\t\\t</svelte:component>\\n\\t{/if}\\n</svelte:component>\\n\\n{#if mounted}\\n\\t<div id=\\"svelte-announcer\\" aria-live=\\"assertive\\" aria-atomic=\\"true\\">\\n\\t\\t{#if navigated}\\n\\t\\t\\tNavigated to {title}\\n\\t\\t{/if}\\n\\t</div>\\n{/if}\\n\\n<style>\\n\\t#svelte-announcer {\\n\\t\\tposition: absolute;\\n\\t\\tleft: 0;\\n\\t\\ttop: 0;\\n\\t\\tclip: rect(0 0 0 0);\\n\\t\\tclip-path: inset(50%);\\n\\t\\toverflow: hidden;\\n\\t\\twhite-space: nowrap;\\n\\t\\twidth: 1px;\\n\\t\\theight: 1px;\\n\\t}\\n</style>"],"names":[],"mappings":"AAsDC,iBAAiB,eAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACnB,SAAS,CAAE,MAAM,GAAG,CAAC,CACrB,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACZ,CAAC"}`
};
const Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {stores} = $$props;
  let {page} = $$props;
  let {components} = $$props;
  let {props_0 = null} = $$props;
  let {props_1 = null} = $$props;
  let {props_2 = null} = $$props;
  setContext("__svelte__", stores);
  afterUpdate(stores.page.notify);
  let mounted = false;
  let navigated = false;
  let title = null;
  onMount(() => {
    const unsubscribe = stores.page.subscribe(() => {
      if (mounted) {
        navigated = true;
        title = document.title || "untitled page";
      }
    });
    mounted = true;
    return unsubscribe;
  });
  if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
    $$bindings.stores(stores);
  if ($$props.page === void 0 && $$bindings.page && page !== void 0)
    $$bindings.page(page);
  if ($$props.components === void 0 && $$bindings.components && components !== void 0)
    $$bindings.components(components);
  if ($$props.props_0 === void 0 && $$bindings.props_0 && props_0 !== void 0)
    $$bindings.props_0(props_0);
  if ($$props.props_1 === void 0 && $$bindings.props_1 && props_1 !== void 0)
    $$bindings.props_1(props_1);
  if ($$props.props_2 === void 0 && $$bindings.props_2 && props_2 !== void 0)
    $$bindings.props_2(props_2);
  $$result.css.add(css$3);
  {
    stores.page.set(page);
  }
  return `


${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, Object.assign(props_0 || {}), {}, {
    default: () => `${components[1] ? `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, Object.assign(props_1 || {}), {}, {
      default: () => `${components[2] ? `${validate_component(components[2] || missing_component, "svelte:component").$$render($$result, Object.assign(props_2 || {}), {}, {})}` : ``}`
    })}` : ``}`
  })}

${mounted ? `<div id="${"svelte-announcer"}" aria-live="${"assertive"}" aria-atomic="${"true"}" class="${"svelte-1j55zn5"}">${navigated ? `Navigated to ${escape(title)}` : ``}</div>` : ``}`;
});
function set_paths(paths) {
}
function set_prerendering(value) {
}
var user_hooks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module"
});
const template = ({head, body}) => '<!DOCTYPE html>\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<link rel="icon" href="/favicon.ico" />\n		<meta name="viewport" content="width=device-width, initial-scale=1" />\n		' + head + '\n	</head>\n	<body>\n		<div id="svelte">' + body + "</div>\n	</body>\n</html>\n";
let options = null;
function init(settings) {
  set_paths(settings.paths);
  set_prerendering(settings.prerendering || false);
  options = {
    amp: false,
    dev: false,
    entry: {
      file: "/./_app/start-c714171c.js",
      css: ["/./_app/assets/start-a8cd1609.css"],
      js: ["/./_app/start-c714171c.js", "/./_app/chunks/vendor-190594a2.js"]
    },
    fetched: void 0,
    get_component_path: (id) => "/./_app/" + entry_lookup[id],
    get_stack: (error2) => String(error2),
    handle_error: (error2) => {
      console.error(error2.stack);
      error2.stack = options.get_stack(error2);
    },
    hooks: get_hooks(user_hooks),
    hydrate: true,
    initiator: void 0,
    load_component,
    manifest,
    paths: settings.paths,
    read: settings.read,
    root: Root,
    router: true,
    ssr: true,
    target: "#svelte",
    template
  };
}
const empty = () => ({});
const manifest = {
  assets: [],
  layout: ".svelte/build/components/layout.svelte",
  error: ".svelte/build/components/error.svelte",
  routes: [
    {
      type: "page",
      pattern: /^\/$/,
      params: empty,
      a: [".svelte/build/components/layout.svelte", "src/routes/index.svelte"],
      b: [".svelte/build/components/error.svelte"]
    }
  ]
};
const get_hooks = (hooks) => ({
  getContext: hooks.getContext || (() => ({})),
  getSession: hooks.getSession || (() => ({})),
  handle: hooks.handle || (({request, render: render2}) => render2(request))
});
const module_lookup = {
  ".svelte/build/components/layout.svelte": () => Promise.resolve().then(function() {
    return layout;
  }),
  ".svelte/build/components/error.svelte": () => Promise.resolve().then(function() {
    return error;
  }),
  "src/routes/index.svelte": () => Promise.resolve().then(function() {
    return index;
  })
};
const metadata_lookup = {".svelte/build/components/layout.svelte": {entry: "/./_app/layout.svelte-207a4756.js", css: [], js: ["/./_app/layout.svelte-207a4756.js", "/./_app/chunks/vendor-190594a2.js"], styles: null}, ".svelte/build/components/error.svelte": {entry: "/./_app/error.svelte-b2fb8698.js", css: [], js: ["/./_app/error.svelte-b2fb8698.js", "/./_app/chunks/vendor-190594a2.js"], styles: null}, "src/routes/index.svelte": {entry: "/./_app/pages/index.svelte-1cc181c4.js", css: ["/./_app/assets/pages/index.svelte-d80ab07a.css"], js: ["/./_app/pages/index.svelte-1cc181c4.js", "/./_app/chunks/vendor-190594a2.js"], styles: null}};
async function load_component(file) {
  return {
    module: await module_lookup[file](),
    ...metadata_lookup[file]
  };
}
init({paths: {base: "", assets: "/."}});
function render(request, {
  prerender
} = {}) {
  const host = request.headers["host"];
  return ssr({...request, host}, options, {prerender});
}
const Layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${slots.default ? slots.default({}) : ``}`;
});
var layout = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Layout
});
function load({error: error2, status}) {
  return {props: {error: error2, status}};
}
const Error = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {status} = $$props;
  let {error: error2} = $$props;
  if ($$props.status === void 0 && $$bindings.status && status !== void 0)
    $$bindings.status(status);
  if ($$props.error === void 0 && $$bindings.error && error2 !== void 0)
    $$bindings.error(error2);
  return `<h1>${escape(status)}</h1>

<p>${escape(error2.message)}</p>


${error2.stack ? `<pre>${escape(error2.stack)}</pre>` : ``}`;
});
var error = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Error,
  load
});
const EditableLabel = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  createEventDispatcher();
  let {editing = false} = $$props;
  let {value = ""} = $$props;
  if ($$props.editing === void 0 && $$bindings.editing && editing !== void 0)
    $$bindings.editing(editing);
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  return `${editing ? `
	<input autofocus${add_attribute("value", value, 1)}>` : `<span>${slots.default ? slots.default({}) : `${escape(value)}`}</span>`}`;
});
var TodoItemView_svelte_svelte_type_style_lang = ".done.svelte-1i3avza{text-decoration:line-through}";
const css$2 = {
  code: ".done.svelte-1i3avza{text-decoration:line-through}",
  map: `{"version":3,"file":"TodoItemView.svelte","sources":["TodoItemView.svelte"],"sourcesContent":["<script lang=\\"typescript\\">;\\nimport { createEventDispatcher } from 'svelte';\\nimport EditableLabel from './EditableLabel.svelte';\\nconst dispatch = createEventDispatcher();\\nexport let item;\\n</script>\\n\\n<li>\\n\\t<input\\n\\t\\ttype=\\"checkbox\\"\\n\\t\\ton:click={() => dispatch('item-toggled', { id: item.id })}\\n\\t\\tchecked={item.completed}\\n\\t/>\\n\\t<span class:done={item.completed}>\\n\\t\\t<EditableLabel\\n\\t\\t\\tvalue={item.caption}\\n\\t\\t\\ton:value-changed={(e) => dispatch('item-renamed', { id: item.id, name: e.detail })}\\n\\t\\t/>\\n\\t</span>\\n</li>\\n\\n<style>\\n\\t.done {\\n\\t\\ttext-decoration: line-through;\\n\\t}\\n</style>\\n"],"names":[],"mappings":"AAsBC,KAAK,eAAC,CAAC,AACN,eAAe,CAAE,YAAY,AAC9B,CAAC"}`
};
const TodoItemView = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  createEventDispatcher();
  let {item} = $$props;
  if ($$props.item === void 0 && $$bindings.item && item !== void 0)
    $$bindings.item(item);
  $$result.css.add(css$2);
  return `<li><input type="${"checkbox"}" ${item.completed ? "checked" : ""}>
	<span class="${["svelte-1i3avza", item.completed ? "done" : ""].join(" ").trim()}">${validate_component(EditableLabel, "EditableLabel").$$render($$result, {value: item.caption}, {}, {})}</span>
</li>`;
});
const NewTodoItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  createEventDispatcher();
  let value = "";
  let elem = void 0;
  return `<div><input${add_attribute("value", value, 1)}${add_attribute("this", elem, 1)}>
	<button ${value.length === 0 ? "disabled" : ""}>Add</button></div>`;
});
var TodoListView_svelte_svelte_type_style_lang = ".header.svelte-mk06fh{margin-bottom:1em;border-bottom:1px solid #ddd}.hide-completed.svelte-mk06fh{float:right}.name.svelte-mk06fh{font-variant:small-caps;font-size:1.2em}.container.svelte-mk06fh{border:1px solid #e0e0e0;border-radius:3px;padding:1em;background-color:#fafafa;color:#044}.footer.svelte-mk06fh{margin-top:1em;font-size:0.75em}";
const css$1 = {
  code: ".header.svelte-mk06fh{margin-bottom:1em;border-bottom:1px solid #ddd}.hide-completed.svelte-mk06fh{float:right}.name.svelte-mk06fh{font-variant:small-caps;font-size:1.2em}.container.svelte-mk06fh{border:1px solid #e0e0e0;border-radius:3px;padding:1em;background-color:#fafafa;color:#044}.footer.svelte-mk06fh{margin-top:1em;font-size:0.75em}",
  map: `{"version":3,"file":"TodoListView.svelte","sources":["TodoListView.svelte"],"sourcesContent":["<script lang=\\"typescript\\">import { createEventDispatcher } from 'svelte';\\n;\\nimport TodoItemView from './TodoItemView.svelte';\\nimport NewTodoItem from './NewTodoItem.svelte';\\nconst dispatch = createEventDispatcher();\\nexport let todoList;\\nexport let todoCount;\\n</script>\\n\\n<div class=\\"container\\">\\n\\t<div class=\\"header\\">\\n\\t\\t<span class=\\"name\\">{todoList.name}</span>\\n\\t\\t<div class=\\"hide-completed\\">\\n\\t\\t\\t<span>hide completed</span>\\n\\t\\t\\t<input\\n\\t\\t\\t\\ttype=\\"checkbox\\"\\n\\t\\t\\t\\ton:click={() => dispatch('hide-toggled')}\\n\\t\\t\\t\\tchecked={todoList.hideCompleted}\\n\\t\\t\\t/>\\n\\t\\t</div>\\n\\t</div>\\n\\t<div class=\\"content\\">\\n\\t\\t{#if todoList.items.length == 0 || (todoList.hideCompleted && todoCount === 0)}\\n\\t\\t\\tPlan your next step!\\n\\t\\t{:else}\\n\\t\\t\\t<ul>\\n\\t\\t\\t\\t{#each todoList.items as item}\\n\\t\\t\\t\\t\\t{#if !item.completed || !todoList.hideCompleted}\\n\\t\\t\\t\\t\\t\\t<TodoItemView {item} on:item-toggled on:item-renamed />\\n\\t\\t\\t\\t\\t{/if}\\n\\t\\t\\t\\t{/each}\\n\\t\\t\\t</ul>\\n\\t\\t{/if}\\n\\t</div>\\n\\t<NewTodoItem on:item-created />\\n\\t<div class=\\"footer\\">\\n\\t\\t{#if todoCount === 0}\\n\\t\\t\\tYou have completed all tasks, time to rest!\\n\\t\\t{:else}\\n\\t\\t\\tTotal of {todoCount} item{todoCount > 1 ? 's' : ''} to do.\\n\\t\\t{/if}\\n\\t</div>\\n</div>\\n\\n<style>\\n\\t.header {\\n\\t\\tmargin-bottom: 1em;\\n\\t\\tborder-bottom: 1px solid #ddd;\\n\\t}\\n\\t.hide-completed {\\n\\t\\tfloat: right;\\n\\t}\\n\\t.name {\\n\\t\\tfont-variant: small-caps;\\n\\t\\tfont-size: 1.2em;\\n\\t}\\n\\t.container {\\n\\t\\tborder: 1px solid #e0e0e0;\\n\\t\\tborder-radius: 3px;\\n\\t\\tpadding: 1em;\\n\\t\\tbackground-color: #fafafa;\\n\\t\\tcolor: #044;\\n\\t}\\n\\t.footer {\\n\\t\\tmargin-top: 1em;\\n\\t\\tfont-size: 0.75em;\\n\\t}\\n</style>\\n"],"names":[],"mappings":"AA6CC,OAAO,cAAC,CAAC,AACR,aAAa,CAAE,GAAG,CAClB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC9B,CAAC,AACD,eAAe,cAAC,CAAC,AAChB,KAAK,CAAE,KAAK,AACb,CAAC,AACD,KAAK,cAAC,CAAC,AACN,YAAY,CAAE,UAAU,CACxB,SAAS,CAAE,KAAK,AACjB,CAAC,AACD,UAAU,cAAC,CAAC,AACX,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,IAAI,AACZ,CAAC,AACD,OAAO,cAAC,CAAC,AACR,UAAU,CAAE,GAAG,CACf,SAAS,CAAE,MAAM,AAClB,CAAC"}`
};
const TodoListView = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  createEventDispatcher();
  let {todoList} = $$props;
  let {todoCount} = $$props;
  if ($$props.todoList === void 0 && $$bindings.todoList && todoList !== void 0)
    $$bindings.todoList(todoList);
  if ($$props.todoCount === void 0 && $$bindings.todoCount && todoCount !== void 0)
    $$bindings.todoCount(todoCount);
  $$result.css.add(css$1);
  return `<div class="${"container svelte-mk06fh"}"><div class="${"header svelte-mk06fh"}"><span class="${"name svelte-mk06fh"}">${escape(todoList.name)}</span>
		<div class="${"hide-completed svelte-mk06fh"}"><span>hide completed</span>
			<input type="${"checkbox"}" ${todoList.hideCompleted ? "checked" : ""}></div></div>
	<div class="${"content"}">${todoList.items.length == 0 || todoList.hideCompleted && todoCount === 0 ? `Plan your next step!` : `<ul>${each(todoList.items, (item) => `${!item.completed || !todoList.hideCompleted ? `${validate_component(TodoItemView, "TodoItemView").$$render($$result, {item}, {}, {})}` : ``}`)}</ul>`}</div>
	${validate_component(NewTodoItem, "NewTodoItem").$$render($$result, {}, {}, {})}
	<div class="${"footer svelte-mk06fh"}">${todoCount === 0 ? `You have completed all tasks, time to rest!` : `Total of ${escape(todoCount)} item${escape(todoCount > 1 ? "s" : "")} to do.`}</div>
</div>`;
});
const emptyList = () => {
  return {
    id: v4(),
    name: "My first list",
    hideCompleted: false,
    items: []
  };
};
var DebugComponent_svelte_svelte_type_style_lang = ".container.svelte-ylfni3{font-family:monospace;color:gray;background-color:lightgrey;padding:1em;margin:2em;border:1px solid red}";
const css = {
  code: ".container.svelte-ylfni3{font-family:monospace;color:gray;background-color:lightgrey;padding:1em;margin:2em;border:1px solid red}",
  map: `{"version":3,"file":"DebugComponent.svelte","sources":["DebugComponent.svelte"],"sourcesContent":["<script lang=\\"typescript\\">import { emptyList, TodoList } from '../model/model';\\nexport let todoList = emptyList();\\n</script>\\n\\n<div class=\\"container\\">\\n\\tAll tasks:\\n\\t<div>\\n\\t\\t{#each todoList.items as item}\\n\\t\\t\\t{item.id}: '{item.caption}' is {!item.completed ? 'not' : ''} done<br />\\n\\t\\t{/each}\\n\\t</div>\\n</div>\\n\\n<style>\\n\\t.container {\\n\\t\\tfont-family: monospace;\\n\\t\\tcolor: gray;\\n\\t\\tbackground-color: lightgrey;\\n\\t\\tpadding: 1em;\\n\\t\\tmargin: 2em;\\n\\t\\tborder: 1px solid red;\\n\\t}\\n</style>\\n"],"names":[],"mappings":"AAcC,UAAU,cAAC,CAAC,AACX,WAAW,CAAE,SAAS,CACtB,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,SAAS,CAC3B,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CACX,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,GAAG,AACtB,CAAC"}`
};
const DebugComponent = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {todoList = emptyList()} = $$props;
  if ($$props.todoList === void 0 && $$bindings.todoList && todoList !== void 0)
    $$bindings.todoList(todoList);
  $$result.css.add(css);
  return `<div class="${"container svelte-ylfni3"}">All tasks:
	<div>${each(todoList.items, (item) => `${escape(item.id)}: &#39;${escape(item.caption)}&#39; is ${escape(!item.completed ? "not" : "")} done<br>`)}</div>
</div>`;
});
const Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let todoCount;
  let todoList = {
    id: v4(),
    name: "my first list",
    hideCompleted: false,
    items: [
      {
        id: v4(),
        caption: "a task",
        completed: false
      },
      {
        id: v4(),
        caption: "a task",
        completed: true
      },
      {
        id: v4(),
        caption: "other task",
        completed: false
      }
    ]
  };
  todoCount = todoList.items.filter((item) => !item.completed).length;
  return `<div>${validate_component(TodoListView, "TodoListView").$$render($$result, {todoList, todoCount}, {}, {})}
	${validate_component(DebugComponent, "DebugComponent").$$render($$result, {todoList}, {}, {})}</div>`;
});
var index = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Routes
});
export {init, render};
